package chapter5;

/*
 * The exception handling in java is one of the powerful mechanism to handle
 * the runtime errors so that normal flow of the application can be maintained.
 * Hierarchy of Java Exception classes:
 *   https://www.javatpoint.com/images/throwable.png
 *
 */

import java.util.Scanner;

class ExceptionCall {
    /*
     * Number format Exception Method
     */
    int data = 0;
    Integer arraydata[] = new Integer[5];

    /*
     * ArithmeticException code
     *
     * Divide by 0 is called as ArithmeticException Exception
     * */
    int div(int a, int b) {
        int c = 0;
        try {
            //c = (b!=0)?(a/b):0; bypassing the exception
            c = a / b;//creating exception
        } catch (ArithmeticException e) {
            c = 0;
            System.out.println(e);
        }
        /*
         * Rest of code will be executed if the exception is catched
         * otherwise it will be unreachable code.
         * */
        return c;
    }

    /*
     * Number format Exception Method
     */
    String NullExp() {
        String s = null;
        try {
            /*
             * below code is unreachable until you provide the data in the s.
             * */
            System.out.println("String length : " + s.length());//exception generated here
        } catch (Exception e) {
            //e.printStackTrace();
            System.out.println(e);
        }
        return s;
    }

    int setNum(String data) {
        /*
         * below code will generate the number format exception,
         * if string is given in the method call
         * */
        try {
            this.data = Integer.parseInt(data);
        } catch (Exception e) {
            //e.printStackTrace();
            System.out.println(e);
        }
        /*
         * code will execute 0 if exception is generated
         * */
        return this.data;
    }

    void setDataArray(int... arraydata) {
        for (int i = 0; i < arraydata.length; i++) {
            /*
             *Below code will generate the ArrayIndexOut of bound exception,
             * if data is overflow other wise null pointer Exception if is is underflow.
             * */
            try {
                this.arraydata[i] = arraydata[i];
            } catch (Exception e) {
                System.out.println(e);
                //e.printStackTrace();
            }
        }
    }
}


public class ExceptionHandling {

    public static void main(String[] args) {
        ExceptionCall ac = new ExceptionCall();
        int choice = 0;
        System.out.println("-----------------------------------------------------------------------");
        System.out.println("\t\t Exceptions call");
        System.out.println("-----------------------------------------------------------------------");
        System.out.println("Enter the choice Below:\n" +
                "1. Arithmatic Exception\n" +
                "2. Null Pointer Exception\n" +
                "3. Number Format Exception\n" +
                "4. ArrayIndexOutofBound Exception\n");
        Scanner sc = new Scanner(System.in);
        choice = sc.nextInt();
        switch (choice) {
            case 1:
                System.out.println("-----------------------------------------------------------------------");
                System.out.println("\t\t Arithmatic Exception");
                System.out.println("-----------------------------------------------------------------------");
                System.out.println("Answer :" + ac.div(10, 0));//exception generated by the second value - 0
                System.out.println("-----------------------------------------------------------------------");
                break;
            case 2:
                System.out.println("-----------------------------------------------------------------------");
                System.out.println("\t\t Null Pointer Exception");
                System.out.println("-----------------------------------------------------------------------");
                System.out.println("Null Pointer method Call :" + ac.NullExp());//exception generated by the second value - 0
                System.out.println("-----------------------------------------------------------------------");
                break;
            case 3:
                System.out.println("-----------------------------------------------------------------------");
                System.out.println("\t\t Number Format Exception");
                System.out.println("-----------------------------------------------------------------------");
                try {
                    System.out.println("Number Format method Call :" + ac.setNum("a"));//exception generated by the second value - 0
                } catch (Exception e) {
                    System.out.println(e);
                }
                System.out.println("-----------------------------------------------------------------------");
                break;
            case 4:
                System.out.println("-----------------------------------------------------------------------");
                System.out.println("\t\t ArrayIndexOutofBound Exception");
                System.out.println("-----------------------------------------------------------------------");
                int arr[] = {1, 2, 3, 4, 5, 6};
                System.out.println("ArrayIndexOutofBound method Call :");
                ac.setDataArray(arr);
                System.out.println("-----------------------------------------------------------------------");
                break;
            default:
                break;
        }
    }
}
